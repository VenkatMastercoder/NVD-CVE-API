import axios from "axios";
import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { ShimmerTable } from "react-shimmer-effects";

const Home = () => {
  const [allVulnerabilities, setAllVulnerabilities] = useState([]);
  const [visibleVulnerabilities, setVisibleVulnerabilities] = useState([]);
  const [resultsPerPage, setResultsPerPage] = useState(10);
  const [currentPage, setCurrentPage] = useState(0);
  // const [sortField, setSortField] = useState("publishedDate");
  // const [sortOrder, setSortOrder] = useState("asc");
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true); // Start loading
      try {
        const response = await axios.get(
          `https://services.nvd.nist.gov/rest/json/cves/2.0`
        );
        console.log("API Response:", response.data);
        setAllVulnerabilities(response.data.vulnerabilities);
        setCurrentPage(0);
      } catch (error) {
        console.error("Error fetching data: ", error);
      } finally {
        setIsLoading(false); // Stop loading regardless of the outcome
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    const firstPageIndex = currentPage * resultsPerPage;
    const lastPageIndex = firstPageIndex + resultsPerPage;
    setVisibleVulnerabilities(
      allVulnerabilities.slice(firstPageIndex, lastPageIndex)
    );
  }, [currentPage, resultsPerPage, allVulnerabilities]);

  const handlePrevious = () => {
    setCurrentPage((prev) => prev - 1);
  };

  const handleNext = () => {
    setCurrentPage((prev) => prev + 1);
  };

  const lastPage = Math.ceil(allVulnerabilities.length / resultsPerPage) - 1;

  // const handleSortChange = (field) => {
  //   if (field === sortField) {
  //     setSortOrder(sortOrder === "asc" ? "desc" : "asc");
  //   } else {
  //     setSortField(field);
  //     setSortOrder("asc");
  //   }
  // };

  return (
    <>
      <div className="2xl:container mx-auto">
        <div className="w-[90%] mx-auto grid grid-cols-1">
          <p>Total Records : {visibleVulnerabilities.length} </p>
          <div className="overflow-x-auto relative shadow-md sm:rounded-lg w-[100%]">
            <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
              <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                  <th scope="col" className="py-3 px-6">
                    ID
                  </th>
                  <th scope="col" className="py-3 px-6">
                    Source Identifier
                  </th>
                  <th scope="col" className="py-3 px-6">
                    Published
                    {/* <button onClick={() => handleSortChange("publishedDate")}>
                      {sortField === "publishedDate"
                        ? sortOrder === "asc"
                          ? "↑"
                          : "↓"
                        : ""}
                    </button> */}
                  </th>
                  <th scope="col" className="py-3 px-6">
                    Last Modified
                    {/* <button
                      onClick={() => handleSortChange("lastModifiedDate")}>
                      {sortField === "lastModifiedDate"
                        ? sortOrder === "asc"
                          ? "↑"
                          : "↓"
                        : ""}
                    </button> */}
                  </th>
                  <th scope="col" className="py-3 px-6">
                    Status
                  </th>
                </tr>
              </thead>

              <tbody>
                {visibleVulnerabilities.map((vuln, index) => (
                  <>
                    <tr
                      key={index}
                      className="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                      <Link to={"/cves/" + vuln.cve.id} className="w-[100%]">
                        <td className="py-4 px-6">{vuln.cve.id}</td>{" "}
                      </Link>
                      <td className="py-4 px-6">{vuln.cve.sourceIdentifier}</td>
                      <td className="py-4 px-6">{vuln.cve.published}</td>
                      <td className="py-4 px-6">{vuln.cve.lastModified}</td>
                      <td className="py-4 px-6">{vuln.cve.vulnStatus}</td>
                    </tr>
                  </>
                ))}
              </tbody>
            </table>
            {isLoading ? (
              <div>
                <ShimmerTable row={5} col={5} />
              </div>
            ) : (
              <></>
            )}
          </div>
          <div className="py-4 flex justify-between">
            <button
              onClick={handlePrevious}
              disabled={currentPage === 0}
              className="px-4 py-2 text-sm text-blue-700 bg-blue-100 disabled:text-gray-500 disabled:bg-gray-300 rounded-md">
              Previous
            </button>
            <label htmlFor="resultsPerPage" className="font-medium">
              Results Per Page:
              <select
                id="resultsPerPage"
                value={resultsPerPage}
                onChange={(e) => setResultsPerPage(Number(e.target.value))}
                className="ml-2 py-1 px-2 border border-gray-300 rounded-md">
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
              </select>
            </label>
            <button
              onClick={handleNext}
              disabled={currentPage >= lastPage}
              className="px-4 py-2 text-sm text-blue-700 bg-blue-100 disabled:text-gray-500 disabled:bg-gray-300 rounded-md">
              Next
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

export default Home;
